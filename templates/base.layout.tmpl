{{ define "base"}}

    <!doctype html>
    <html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <title>Go B & B</title>

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" 
              integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.15.5/dist/sweetalert2.min.css">
        <link rel="stylesheet" href="/static/css/styles.css" type="text/css">
    </head>

    <body>
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <a class="navbar-brand" href="/">Go B & B</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item active">
                        <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Rooms
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                            <a class="dropdown-item" href="/generals-quarters">General's Quarters</a>
                            <a class="dropdown-item" href="/majors-suite">Major's Suite</a>
                        </div>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </nav>

        {{ block "content" . }}

        {{ end }}

        <footer class="row my-footer">
            <div class="row">
                <div class="col">
                    left
                </div>
        
                <div class="col">
                    center
                </div>
        
                <div class="col">
                    right
                </div>
            </div>
        </footer>
        
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
                integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
                crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct" 
                crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.2/dist/js/datepicker-full.min.js"></script>
        <script src="https://unpkg.com/notie"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        
        {{ block "js" .}}

        {{ end }}
        
        <script>
            let attention = Prompt();
        
            (() => {
                'use strict';
                window.addEventListener('load', function () {
                    // Fetch all the forms we want to apply custom Bootstrap validation styles to
                    let forms = document.getElementsByClassName('needs-validation');
        
                    // Loop over them and prevent submission
                    Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        
            const notify = (msg, msgType) => {
                notie.alert({
                    type: msgType,
                    text: msg,
                });
            };
        
            const notifyModal = (title, text, icon, confirmationButtonText) => {
                Swal.fire({
                    title: title,
                    html: text,
                    icon: icon,
                    confirmButtonText: confirmationButtonText
                });
            };
        
            function Prompt() {
                let toast = (c) => {
                    const{
                        msg = '',
                        icon = 'success',
                        position = 'top-end',
        
                    } = c;
        
                    const Toast = Swal.mixin({
                        toast: true,
                        title: msg,
                        position: position,
                        icon: icon,
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer);
                            toast.addEventListener('mouseleave', Swal.resumeTimer);
                        }
                    });
                    Toast.fire({});
                };
        
                let success = (c) => {
                    const {
                        msg = "",
                        title = "",
                        footer = "",
                    } = c;
        
                    Swal.fire({
                        icon: 'success',
                        title: title,
                        text: msg,
                        footer: footer,
                    });
                };
        
                let error = (c) => {
                    const {
                        msg = "",
                        title = "",
                        footer = "",
                    } = c;
        
                    Swal.fire({
                        icon: 'error',
                        title: title,
                        text: msg,
                        footer: footer,
                    });
                };
        
                async function custom(c) {
                    const {
                        msg = "",
                        title = "",
                    } = c;
        
                    const { value: result } = await Swal.fire({
                        title: title,
                        html: msg,
                        backdrop: false,
                        focusConfirm: false,
                        showCancelButton: true,
                        willOpen: () => {
                            // If a willOpen callback is defined, call it
                            if (c.willOpen !== undefined) {
                                c.willOpen();
                            }
                        },
                        didOpen: () => {
                            // If a didOpen callback is defined, call it
                            if (c.didOpen !== undefined) {
                                c.didOpen();
                            }
                        },
                        preConfirm: () => {
                            return [
                                document.getElementById('start').value,
                                document.getElementById('end').value
                            ];
                        }
                    });
        
                    // If there is a result
                    if (result) {
                        // If the result is not cancel
                        if (result.dismiss !== Swal.DismissReason.cancel) {
                            // If the result is not empty
                            if (result.value !== "") {

                                // If there is a callback
                                if (c.callback !== undefined) {
                                    c.callback(result);
                                }
                            } else {
                                c.callback(false);
                            }
                        }
                    } else {
                        c.callback(false);
                    }
                };
        
                return {
                    toast: toast,
                    success: success,
                    error: error,
                    custom: custom,
                };
            }
        
        </script>
        
        </body>
        
        </html>
        
{{ end }}
